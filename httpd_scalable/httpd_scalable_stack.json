{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "VpcTag": {
      "Type": "String",
      "Default": "default"
    },
    "TagName": {
      "Type": "String",
      "Default": "demo-codes-stack-1"
    },
    "ImageId": {
      "Description": "AMI Image id",
      "Type": "String",
      "Default": "ami-e3106686"
    },
    "DiskSize": {
      "Description": "EBS volume disk size in GB",
      "Type": "String",
      "Default": "8"
    },
    "VolumeType": {
      "Description": "EBS volume type (standard, gp2)",
      "Type": "String",
      "Default": "gp2"
    },
    "InstanceType": {
      "Description": "Instance Type",
      "Type": "String",
      "Default": "t2.micro"
    }
  },
  "Mappings": {
    "VpcMappings": {
      "default": {
        "VpcId": "vpc-98b643fd",
        "KeyName": "itm544",
        "AvailabilityZones": [
          "us-east-1a",
          "us-east-1b",
          "us-east-1d"
        ],
        "SubnetIds": [
          "subnet-ebb2509d",
          "subnet-070e3b2c",
          "subnet-3c230d7a"
        ],
        "AlarmSNS": "arn:aws:sns:us-east-1:943227140367:cloudwatch-alarms",
        "SecurityGroups": [
          "sg-2a509b4f"
        ]
      }
    }
  },
  "Resources": {
    "ELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups": {
          "Fn::FindInMap": [
            "VpcMappings",
            {
              "Ref": "VpcTag"
            },
            "SecurityGroups"
          ]
        },
        "Subnets": {
          "Fn::FindInMap": [
            "VpcMappings",
            {
              "Ref": "VpcTag"
            },
            "SubnetIds"
          ]
        },
        "Listeners": [
          {
            "LoadBalancerPort": 80,
            "InstancePort": 80,
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
          },
          {
            "LoadBalancerPort": 8080,
            "InstancePort": 8080,
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
          },
          {
            "LoadBalancerPort": 5000,
            "InstancePort": 5000,
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:80/index.html",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "10",
          "Interval": "180",
          "Timeout": "15"
        }
      }
    },
    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Fn::FindInMap": [
            "VpcMappings",
            {
              "Ref": "VpcTag"
            },
            "AvailabilityZones"
          ]
        },
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": "6000",
        "LaunchConfigurationName": {
          "Ref": "Lconfig"
        },
        "MinSize": "1",
        "MaxSize": "1",
        "DesiredCapacity": "1",
        "LoadBalancerNames": [
          {
            "Ref": "ELB"
          }
        ],
        "VPCZoneIdentifier": {
          "Fn::FindInMap": [
            "VpcMappings",
            {
              "Ref": "VpcTag"
            },
            "SubnetIds"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "TagName"
            },
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 2 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 5% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "600",
        "EvaluationPeriods": "6",
        "Threshold": "70",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "Lconfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "IamInstanceProfile": "arn:aws:iam::943227140367:instance-profile/test-role",
        "ImageId": {
          "Ref": "ImageId"
        },
        "InstanceMonitoring": "false",
        "InstanceType": "t2.micro",
        "KeyName": {
          "Fn::FindInMap": [
            "VpcMappings",
            {
              "Ref": "VpcTag"
            },
            "KeyName"
          ]
        },
        "SecurityGroups": {
          "Fn::FindInMap": [
            "VpcMappings",
            {
              "Ref": "VpcTag"
            },
            "SecurityGroups"
          ]
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "DeleteOnTermination": "true",
              "VolumeType": {
                "Ref": "VolumeType"
              },
              "VolumeSize": {
                "Ref": "DiskSize"
              }
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackName" },
                "         -r WebServerGroup ",
                "\n",
                "yum -y install httpd awscli git\n",
                "service httpd start\n",
                "touch /var/www/html/index.html\n",
                "echo test > /var/www/html/index.html\n",
                "git clone https://github.com/democodes/cloud-stacks.git\n",
                "pip install flask\n",
                "chmod a+x cloud-stacks/appy.py\n",
                "cd cloud-stacks;nohup python app.py &\n",
                "/opt/aws/bin/cfn-signal -e 0 --stack ", { "Ref" : "AWS::StackName" },
                "         --resource WebServerGroup \n",
                "'\n"
              ]
            ]
          }
        }
      }
    }
  },
  "Outputs": {
    "BalancerName": {
      "Description": "ELB DNS Name",
      "Value": {
        "Fn::GetAtt": [
          "ELB",
          "DNSName"
        ]
      }
    },
    "BalancerURL": {
      "Description": "ELB URL",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "ELB",
                "DNSName"
              ]
            },
            "/"
          ]
        ]
      }
    }
  }
}